# // #testkit-settings
akka.kafka.testkit {

  # amount of time to wait until the desired cluster state is reached
  cluster-timeout = 10 seconds

  # amount of time to wait until the desired consumer group state is reached
  consumer-group-timeout = 10 seconds

  # amount of time to wait in-between state checks
  check-interval = 100 ms
}
# // #testkit-settings

# // #testkit-testcontainers-settings
akka.kafka.testkit.testcontainers {

  # define these settings to select a different Kafka/ZooKeeper docker image
  # we recommend using Confluent Platform docker images and using the same version across all images
  # Confluent publishes images on DockerHub: https://hub.docker.com/r/confluentinc/cp-kafka/tags
  # Kafka versions in Confluent Platform: https://docs.confluent.io/current/installation/versions-interoperability.html
  zookeeper-image = "confluentinc/cp-zookeeper"
  zookeeper-image-tag = ${akka.kafka.testkit.testcontainers.confluent-platform-version}
  kafka-image = "confluentinc/cp-kafka"
  kafka-image-tag = ${akka.kafka.testkit.testcontainers.confluent-platform-version}
  schema-registry-image = "confluentinc/cp-schema-registry"
  schema-registry-image-tag = ${akka.kafka.testkit.testcontainers.confluent-platform-version}
  confluent-platform-version = "6.0.1"

  # the number of Kafka brokers to include in a test cluster
  num-brokers = 1

  # set this to use a replication factor for internal Kafka topics such as Consumer Offsets and Transaction log.
  # this replication factor must be less than or equal to `num-brokers`
  internal-topics-replication-factor = 1

  # set this to true to use launch a testcontainer for Confluent Schema Registry
  use-schema-registry = false

  # set this to true to stream the STDOUT and STDERR of containers to SLF4J loggers
  # this requires the SLF4J dependency to be on the classpath and the loggers enabled in your logging configuration
  container-logging = false

  # set this to the total length of time to wait for a Kafka container cluster to start. this includes all brokers
  # zookeeper, and schema registry nodes. note that this can take a considerable time in limited resource environments.
  cluster-start-timeout = 360 s

  # set this to the total length of time to wait for a Kafka container readiness check to complete. note that this can
  # take a considerable time in limited resource environments.
  readiness-check-timeout = 360 s
}
# // #testkit-testcontainers-settings
