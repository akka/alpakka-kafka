import net.aichler.jupiter.sbt.Import.JupiterKeys
import sbt.Keys.libraryDependencies
import sbt.Keys.scalaBinaryVersion
import sbt._

/**
 *
 */
object BuildType {
  val Nightly = sys.env.get("TRAVIS_EVENT_TYPE").contains("cron")

}
object Dependencies {

  object Versions {
    val Scala211 = "2.11.12"
    val Scala212 = "2.12.10"
    val Scala213 = "2.13.1"
    // Only the root project and the `clusterSharding` project use `ScalaVersions`, all others
    // use `CustomScalaVersions`
    val ScalaVersions = Seq(Scala212, Scala213)
    val CustomScalaVersions = if (BuildType.Nightly) Seq(Scala212, Scala213) else Seq(Scala212, Scala211, Scala213)

    val SilencerVersion = "1.4.4"

    val akkaVersion26 = "2.6.3"
    val akkaVersion = if (BuildType.Nightly) akkaVersion26 else "2.5.30"
    val AkkaBinaryVersion25 = "2.5"
    val AkkaBinaryVersion26 = "2.6"
    val AkkaBinaryVersion = if (BuildType.Nightly) AkkaBinaryVersion26 else AkkaBinaryVersion25

    val kafkaVersion = "2.4.1"
    val embeddedKafkaVersion = kafkaVersion
    // this depends on Kafka, and should be upgraded to such latest version
    // that depends on the same Kafka version, as is defined above
    val embeddedKafkaSchemaRegistry = "5.4.1.2"

    val kafkaVersionForDocs = "24"

    val scalatestVersion = "3.0.8"
    val testcontainersVersion = "1.14.3"
    val slf4jVersion = "1.7.26"
    val confluentAvroSerializerVersion = "5.4.1"
  }

  import Versions._

  val embeddedKafka = "io.github.embeddedkafka" %% "embedded-kafka" % Versions.embeddedKafkaVersion

  val confluentLibsExclusionRules = Seq(
    ExclusionRule("log4j", "log4j"),
    ExclusionRule("org.slf4j", "slf4j-log4j12"),
    ExclusionRule("com.typesafe.scala-logging"),
    ExclusionRule("org.apache.kafka"),
    // a transient dependency of `kafka-avro-serializer` brings in a SNAPSHOT version of `javafx.base` that is no longer
    // published to maven central.  this is a workaround for the upstream confluent `rest-utils` project (that
    // `kafka-avro-serializer` depends on, upgrades their version of jersey.
    // https://github.com/confluentinc/rest-utils/issues/170
    ExclusionRule("org.openjfx", "javafx.base")
  )

  // Allows to silence scalac compilation warnings selectively by code block or file path
  // This is only compile time dependency, therefore it does not affect the generated bytecode
  // https://github.com/ghik/silencer
  val silencer = {
    Seq(
      compilerPlugin("com.github.ghik" % "silencer-plugin" % SilencerVersion cross CrossVersion.patch),
      "com.github.ghik" % "silencer-lib" % SilencerVersion % Provided cross CrossVersion.patch
    )
  }

  val core = libraryDependencies ++= Seq(
        "com.typesafe.akka" %% "akka-stream" % akkaVersion,
        "com.typesafe.akka" %% "akka-discovery" % akkaVersion % Provided,
        "org.apache.kafka" % "kafka-clients" % kafkaVersion,
        "org.scala-lang.modules" %% "scala-collection-compat" % "2.1.2"
      ) ++ silencer

  val testkit = libraryDependencies ++= Seq(
        "com.typesafe.akka" %% "akka-stream-testkit" % akkaVersion,
        "org.testcontainers" % "kafka" % testcontainersVersion % Provided,
        "org.scalatest" %% "scalatest" % scalatestVersion % Provided,
        "junit" % "junit" % "4.12" % Provided,
        "org.junit.jupiter" % "junit-jupiter-api" % JupiterKeys.junitJupiterVersion.value % Provided,
        "org.apache.kafka" %% "kafka" % embeddedKafkaVersion % Provided exclude ("org.slf4j", "slf4j-log4j12"),
        "org.apache.commons" % "commons-compress" % "1.19" % Provided, // embedded Kafka pulls in Avro which pulls in commons-compress 1.8.1
        embeddedKafka % Provided exclude ("log4j", "log4j")
      ) ++ silencer

  val clusterSharding = libraryDependencies ++= Seq(
        "com.typesafe.akka" %% "akka-cluster-sharding-typed" % akkaVersion26
      ) ++ silencer

  val tests = libraryDependencies ++= Seq(
        "com.typesafe.akka" %% "akka-discovery" % akkaVersion,
        "io.confluent" % "kafka-avro-serializer" % confluentAvroSerializerVersion % Test excludeAll (confluentLibsExclusionRules: _*),
        // See https://github.com/sbt/sbt/issues/3618#issuecomment-448951808
        "javax.ws.rs" % "javax.ws.rs-api" % "2.1.1" artifacts Artifact("javax.ws.rs-api", "jar", "jar"),
        "org.testcontainers" % "kafka" % testcontainersVersion % Test,
        "org.scalatest" %% "scalatest" % scalatestVersion % Test,
        "io.spray" %% "spray-json" % "1.3.5" % Test,
        "com.fasterxml.jackson.core" % "jackson-databind" % "2.10.4" % Test, // ApacheV2
        "org.junit.vintage" % "junit-vintage-engine" % JupiterKeys.junitVintageVersion.value % Test,
        // See http://hamcrest.org/JavaHamcrest/distributables#upgrading-from-hamcrest-1x
        "org.hamcrest" % "hamcrest-library" % "2.2" % Test,
        "org.hamcrest" % "hamcrest" % "2.2" % Test,
        "net.aichler" % "jupiter-interface" % JupiterKeys.jupiterVersion.value % Test,
        "com.typesafe.akka" %% "akka-slf4j" % akkaVersion % Test,
        "ch.qos.logback" % "logback-classic" % "1.2.3" % Test,
        "org.slf4j" % "log4j-over-slf4j" % slf4jVersion % Test,
        // Schema registry uses Glassfish which uses java.util.logging
        "org.slf4j" % "jul-to-slf4j" % slf4jVersion % Test,
        "org.mockito" % "mockito-core" % "2.24.5" % Test,
        embeddedKafka % Test exclude ("log4j", "log4j") exclude ("org.slf4j", "slf4j-log4j12")
      ) ++ silencer ++ {
        scalaBinaryVersion.value match {
          case "2.13" =>
            Seq()
          case "2.12" | "2.11" =>
            Seq(
              "org.apache.kafka" %% "kafka" % kafkaVersion % Provided exclude ("org.slf4j", "slf4j-log4j12"),
              // sbt 1.3.x reports: Conflicting cross-version suffixes in: org.apache.kafka:kafka, com.typesafe.scala-logging:scala-logging
              "io.github.embeddedkafka" %% "embedded-kafka-schema-registry" % embeddedKafkaSchemaRegistry % Test excludeAll (confluentLibsExclusionRules: _*)
            )
        }
      }

  val benchmarks = libraryDependencies ++= Seq(
        "com.typesafe.scala-logging" %% "scala-logging" % "3.9.2",
        "io.dropwizard.metrics" % "metrics-core" % "3.2.6",
        "ch.qos.logback" % "logback-classic" % "1.2.3",
        "org.slf4j" % "log4j-over-slf4j" % slf4jVersion,
        "com.lightbend.akka" %% "akka-stream-alpakka-csv" % "2.0.0",
        "org.testcontainers" % "kafka" % testcontainersVersion % IntegrationTest,
        "com.typesafe.akka" %% "akka-slf4j" % akkaVersion % IntegrationTest,
        "com.typesafe.akka" %% "akka-stream-testkit" % akkaVersion % IntegrationTest,
        "org.scalatest" %% "scalatest" % scalatestVersion % IntegrationTest
      )

}
